name: Test and Lint

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Lua and luacheck
      run: |
        sudo apt-get update
        sudo apt-get install -y lua5.4 luarocks
        sudo luarocks install luacheck
        
    - name: Run Lua syntax check
      run: |
        echo "üîç Checking Lua syntax for all .lua files..."
        for file in *.lua; do
          if [ -f "$file" ]; then
            echo "  Checking $file..."
            luac -p "$file" || (echo "‚ùå Syntax error in $file" && exit 1)
          fi
        done
        echo "‚úÖ All syntax checks passed!"
        
    - name: Run luacheck linting
      run: |
        echo "üîç Running luacheck on all .lua files..."
        if ! luacheck *.lua --globals _G --std none --ignore 11 --ignore 21 --ignore 131 --ignore 143 --ignore 213 --ignore 311 --ignore 312 --ignore 631 --ignore 611 --ignore 432 --ignore 212 --ignore 211 --ignore 231 --ignore 111 --ignore 112 --ignore 113; then
          echo "‚ùå Luacheck found warnings or errors. Please fix them before merging."
          exit 1
        fi
        echo "‚úÖ All linting checks passed!"

  test:
    runs-on: ubuntu-latest
    name: Unit Tests and Validation
    needs: lint
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Lua
      run: |
        sudo apt-get update
        sudo apt-get install -y lua5.4 luarocks
        
    - name: Validate addon structure
      run: |
        echo "üîç Validating Crosspaths addon structure..."
        
        # Check that .toc file exists
        if [ ! -f "Crosspaths.toc" ]; then
          echo "‚ùå ERROR: Crosspaths.toc file is missing"
          exit 1
        fi
        
        # Check that core Lua files exist
        missing_files=()
        for file in Core.lua Engine.lua UI.lua Tracker.lua Config.lua Logging.lua; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -ne 0 ]; then
          echo "‚ùå ERROR: Missing required files: ${missing_files[*]}"
          exit 1
        fi
        
        # Validate .toc file format
        echo "Validating .toc file format..."
        if ! grep -q "^## Interface:" Crosspaths.toc; then
          echo "‚ùå ERROR: Missing Interface version in .toc file"
          exit 1
        fi
        
        if ! grep -q "^## Title:" Crosspaths.toc; then
          echo "‚ùå ERROR: Missing Title in .toc file"
          exit 1
        fi
        
        if ! grep -q "^## Version:" Crosspaths.toc; then
          echo "‚ùå ERROR: Missing Version in .toc file"
          exit 1
        fi
        
        # Check that all files listed in .toc exist
        echo "Checking that all files listed in .toc exist..."
        grep -v "^#" Crosspaths.toc | grep -v "^$" | while read -r file; do
          if [ ! -f "$file" ]; then
            echo "‚ùå ERROR: File $file listed in .toc but not found"
            exit 1
          fi
        done
        
        echo "‚úÖ All addon structure validations passed!"
        
    - name: Check addon version consistency
      run: |
        echo "üîç Checking version consistency..."
        
        # Extract version from .toc file
        TOC_VERSION=$(grep "^## Version:" Crosspaths.toc | cut -d' ' -f3)
        echo "Version in Crosspaths.toc: $TOC_VERSION"
        
        # Extract version from Core.lua
        CORE_VERSION=$(grep "Crosspaths.version = " Core.lua | cut -d'"' -f2)
        echo "Version in Core.lua: $CORE_VERSION"
        
        if [ "$TOC_VERSION" != "$CORE_VERSION" ]; then
          echo "‚ùå ERROR: Version mismatch between Crosspaths.toc ($TOC_VERSION) and Core.lua ($CORE_VERSION)"
          exit 1
        fi
        
        echo "‚úÖ Version consistency check passed!"
        
    - name: Validate README and documentation
      run: |
        echo "üîç Validating documentation..."
        
        # Check that essential files exist
        for file in README.md LICENSE CHANGELOG.md; do
          if [ ! -f "$file" ]; then
            echo "‚ùå ERROR: Missing documentation file: $file"
            exit 1
          fi
        done
        
        # Check README has key sections
        if ! grep -q "Installation" README.md; then
          echo "‚ùå ERROR: README.md missing Installation section"
          exit 1
        fi
        
        if ! grep -q "Usage" README.md; then
          echo "‚ùå ERROR: README.md missing Usage section"
          exit 1
        fi
        
        # Check CHANGELOG has version entry
        if ! grep -q "\[0\.1\.0\]" CHANGELOG.md; then
          echo "‚ùå ERROR: CHANGELOG.md missing version 0.1.0 entry"
          exit 1
        fi
        
        echo "‚úÖ Documentation validation passed!"
        
    - name: Run unit tests
      run: |
        echo "üß™ Running Crosspaths unit tests..."
        
        # Run the test suite
        ./tests/run_tests.sh
        
        echo "‚úÖ Unit tests completed successfully!"